package coda.util

import coda.util.Iterable
import coda.util.Stack

public interface List<T> implements Iterable<T>, Stack<T> {
	
	/**
	 * Returns the item at the given index.
	 * @param index
	 */
	public T get(int index)
	
	/**
	 * Adds the given item.
	 * @param item
	 */
	public void add(T item)
	
	/**
	 * Removes & returns the item at the given index.
	 * @param index
	 */
	public T remove(int index)
	
	/**
	 * Returns the index of the given item or null.
	 * @param item
	 */
	public default int getIndex(T item) {
		
		for(int i = 0, i < this.getSize(),i+= 1) if(this.get(i) != null) {
			if(this.get(i).equals(item))return i
		}
		
		return null
	}
	
	/**
	 * Returns true if the list contains the given item.
	 * @param item
	 */
	public default boolean contains(T item) {
		return this.getIndex(item) != null
	}
	
	/**
	 * Returns the size of the list.
	 */
	public int getSize()
	
	/**
	 * Converts the list to an array.
	 */
	public array<T> toArray()
	
	/**
	 * Returns true if the list is empty.
	 */
	public default boolean isEmpty() return this.getSize() == 0
	
	/**
	 * Overrides the method from coda.util.Stack
	 */
	public default void push(T item) {
		this.add(item)
	}
	
	/**
	 * Overrides the method from coda.util.Stack
	 */
	public default T pop() {
		return this.remove(this.getSize() - 1)
	}
	
}