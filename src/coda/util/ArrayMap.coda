package coda.util

import coda.lang.UnsupportedOperationException

import coda.util.List
import coda.util.Map
import coda.util.ArrayList

public class ArrayMap<T, V> implements Map<T, V> {
	
	protected class Element<T, V> {
		
		private final T key = empty
		private final V value = empty

		/**
		 * @param key
		 * @param value
		 */
		public Element(T key, V value) {
			this.key = key
			this.value = value
		}
		
		/**
		 * Returns the key.
		 */
		public T getKey() {
			return this.key
		}
		
		/**
		 * @return the value
		 */
		public V getValue() {
			return this.value;
		}
		
	}
	
	private List<Element> elements = empty
	
	/**
	 * Creates a new ArrayMap.
	 */
	public ArrayMap() {
		this.elements = new ArrayList<Element>()
	}
	
	/**
	 * Overrides the method from coda.lang.Object
	 */
	public string toString() {
		string str = "{"
				
		for(e, this.getElements()) str += e.getKey() + "=" + e.getValue() + ", "
		
		if(str.getLength() == 1)return str + "}"
		return str.substring(0, str.getLength() - 2) + "}"
	}
			
	/**
	 * Returns the element having the given key or null.
	 * @param key
	 */
	private Element getElement(T key) {
		for(e, this.getElements()) {
			if(e.getKey() == key)return e
		}
		return null
	}
			
	/**
	 * Overrides the method from coda.util.Map
	 */
	public V get(T key) {
		Element e = this.getElement(key)
		if(e != null)return e.getValue()
		else return null
	}
			
	/**
	 * Overrides the method from coda.util.Map
	 */
	public boolean containsKey(T key) {
		return this.get(key) != null
	}
	
	/**
	 * Overrides the method from coda.util.Map
	 */
	public boolean containsValue(T value) {
		for(e, this.getElements()) {
			if(e.getValue() == value)return true
		}
		return false
	}
	
	/**
	 * Overrides the method from coda.util.Map
	 */
	public V remove(T key) {
		V removed = null
		
		while(this.containsKey(key))removed = this.getElements().remove(this.getElement(key))
		
		return removed
	}
	
	/**
	 * Overrides the method from coda.util.Map
	 */
	public void put(T key, V value) {
		if(key == null)throw new UnsupportedOperationException("Can not put null-key into map.")
		this.getElements().add(new Element(key, value))
	}
	
	/**
	 * Overrides the method from coda.util.Map
	 */
	public int getSize() return this.getElements().getSize()
	
	/**
	 * Overrides the method from coda.util.Map
	 */
	public array<T> getKeys()Â {
		final array<T> keys = T[this.getSize()]
		final List<Element> elements = this.getElements()
			
		for(int i = 0, i < keys.getLength(), i += 1)keys.set(i, elements.get(i).getKey())
		
		return keys
	}
	
	/**
	 * Overrides the method from coda.util.Map
	 */
	public array<V> getValues() {
		final array<T> values = T[this.getSize()]
		final List<Element> elements = this.getElements()
					
		for(int i = 0, i < values.getLength(), i += 1)values.set(i, elements.get(i).getValue())
				
		return values
	}
	
	/**
	 * @return the elements
	 */
	private List<Element> getElements() {
		return elements;
	}
	
}