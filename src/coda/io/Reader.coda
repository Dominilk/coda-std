package coda.io

import coda.io.Closeable
import coda.io.InputStream

public class Reader implements Closeable {
	
	private final InputStream inputStream = empty
	
	/**
	 * Creates a reader reading from the given stream.
	 * @param inputStream
	 */
	public Reader(InputStream inputStream) {
		this.inputStream = inputStream
	}
	
	/**
	 * Closes the underlying inputStream.
	 */
	public void close() this.getInputStream().close()
	
	/**
	 * Reads a line from the underlying stream.
	 */
	public string readLine() return new string(this.getInputStream().readAll())
	
	/**
	 * Reads the next integer.
	 */
	public int readInteger() return this.readLine().toInteger()
	
	/**
	 * Reads the next long.
	 */
	public long readLong() return this.readLine().toLong()

	/**
	 * Reads the next boolean.
	 */
	public boolean readBoolean() return this.readLine().toBoolean()

	/**
	 * Reads the next char.
	 */
	public char readCharacter() return this.getInputStream().read().toCharacter()

	/**
	 * Reads the next double.
	 */
	public double readDouble() return this.readLine().toDouble()

	/**
	 * Reads the next double.
	 */
	public byte readByte() return this.readLine().toByte()

	/**
	 * Returns true if there is a new line available.
	 */
	public boolean hasNextLine() return this.getInputStream().available() > 0
	
	/**
	 * @return the inputStream
	 */
	public InputStream getInputStream() {
		return inputStream;
	}
	
}